// Code generated by goyacc -p assembler -o cmd/asm/assembler.y.go cmd/asm/assembler.y. DO NOT EDIT.

//line cmd/asm/assembler.y:2
package main

import __yyfmt__ "fmt"

//line cmd/asm/assembler.y:2

import (
	"fmt"
	"strconv"
)

//line cmd/asm/assembler.y:11
type assemblerSymType struct {
	yys     int
	program *program
	stmt    *statement
	expr    expression
	tok     token
}

const LF = 57346
const COLON = 57347
const COMMA = 57348
const NUMBER = 57349
const IDENT = 57350
const REGISTER = 57351
const LI = 57352
const LUI = 57353

var assemblerToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LF",
	"COLON",
	"COMMA",
	"NUMBER",
	"IDENT",
	"REGISTER",
	"LI",
	"LUI",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'('",
	"')'",
}

var assemblerStatenames = [...]string{}

const assemblerEofCode = 1
const assemblerErrCode = 2
const assemblerInitialStackSize = 16

//line cmd/asm/assembler.y:110

func checkerr(err error) {
	if err != nil {
		panic(err)
	}
}

//line yacctab:1
var assemblerExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 3,
}

const assemblerPrivate = 57344

const assemblerLast = 37

var assemblerAct = [...]int8{
	13, 14, 15, 16, 6, 27, 10, 7, 10, 8,
	9, 15, 16, 19, 18, 11, 20, 11, 21, 22,
	23, 24, 13, 14, 15, 16, 29, 28, 26, 25,
	17, 12, 5, 4, 3, 2, 1,
}

var assemblerPact = [...]int16{
	-1000, -1, 27, -1000, -1000, -1000, 10, 25, 5, 4,
	-1000, 1, -1000, 1, 1, 1, 1, -1000, 23, 22,
	-12, -3, -3, -1000, -1000, 20, 19, -1000, -1000, -1000,
}

var assemblerPgo = [...]int8{
	0, 36, 35, 34, 33, 32, 4,
}

var assemblerR1 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 2, 3, 4,
	5, 6, 6, 6, 6, 6, 6,
}

var assemblerR2 = [...]int8{
	0, 0, 3, 0, 1, 1, 1, 1, 2, 4,
	4, 1, 3, 3, 3, 3, 3,
}

var assemblerChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, 8, 10, 11,
	7, 16, 4, 12, 13, 14, 15, 5, 9, 9,
	-6, -6, -6, -6, -6, 6, 6, 17, 7, 7,
}

var assemblerDef = [...]int8{
	1, -2, 0, 4, 5, 6, 7, 0, 0, 0,
	11, 0, 2, 0, 0, 0, 0, 8, 0, 0,
	0, 12, 13, 14, 15, 0, 0, 16, 9, 10,
}

var assemblerTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	16, 17, 14, 12, 3, 13, 3, 15,
}

var assemblerTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
}

var assemblerTok3 = [...]int8{
	0,
}

var assemblerErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	assemblerDebug        = 0
	assemblerErrorVerbose = false
)

type assemblerLexer interface {
	Lex(lval *assemblerSymType) int
	Error(s string)
}

type assemblerParser interface {
	Parse(assemblerLexer) int
	Lookahead() int
}

type assemblerParserImpl struct {
	lval  assemblerSymType
	stack [assemblerInitialStackSize]assemblerSymType
	char  int
}

func (p *assemblerParserImpl) Lookahead() int {
	return p.char
}

func assemblerNewParser() assemblerParser {
	return &assemblerParserImpl{}
}

const assemblerFlag = -1000

func assemblerTokname(c int) string {
	if c >= 1 && c-1 < len(assemblerToknames) {
		if assemblerToknames[c-1] != "" {
			return assemblerToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func assemblerStatname(s int) string {
	if s >= 0 && s < len(assemblerStatenames) {
		if assemblerStatenames[s] != "" {
			return assemblerStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func assemblerErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !assemblerErrorVerbose {
		return "syntax error"
	}

	for _, e := range assemblerErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + assemblerTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(assemblerPact[state])
	for tok := TOKSTART; tok-1 < len(assemblerToknames); tok++ {
		if n := base + tok; n >= 0 && n < assemblerLast && int(assemblerChk[int(assemblerAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if assemblerDef[state] == -2 {
		i := 0
		for assemblerExca[i] != -1 || int(assemblerExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; assemblerExca[i] >= 0; i += 2 {
			tok := int(assemblerExca[i])
			if tok < TOKSTART || assemblerExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if assemblerExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += assemblerTokname(tok)
	}
	return res
}

func assemblerlex1(lex assemblerLexer, lval *assemblerSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(assemblerTok1[0])
		goto out
	}
	if char < len(assemblerTok1) {
		token = int(assemblerTok1[char])
		goto out
	}
	if char >= assemblerPrivate {
		if char < assemblerPrivate+len(assemblerTok2) {
			token = int(assemblerTok2[char-assemblerPrivate])
			goto out
		}
	}
	for i := 0; i < len(assemblerTok3); i += 2 {
		token = int(assemblerTok3[i+0])
		if token == char {
			token = int(assemblerTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(assemblerTok2[1]) /* unknown char */
	}
	if assemblerDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", assemblerTokname(token), uint(char))
	}
	return char, token
}

func assemblerParse(assemblerlex assemblerLexer) int {
	return assemblerNewParser().Parse(assemblerlex)
}

func (assemblerrcvr *assemblerParserImpl) Parse(assemblerlex assemblerLexer) int {
	var assemblern int
	var assemblerVAL assemblerSymType
	var assemblerDollar []assemblerSymType
	_ = assemblerDollar // silence set and not used
	assemblerS := assemblerrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	assemblerstate := 0
	assemblerrcvr.char = -1
	assemblertoken := -1 // assemblerrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		assemblerstate = -1
		assemblerrcvr.char = -1
		assemblertoken = -1
	}()
	assemblerp := -1
	goto assemblerstack

ret0:
	return 0

ret1:
	return 1

assemblerstack:
	/* put a state and value onto the stack */
	if assemblerDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", assemblerTokname(assemblertoken), assemblerStatname(assemblerstate))
	}

	assemblerp++
	if assemblerp >= len(assemblerS) {
		nyys := make([]assemblerSymType, len(assemblerS)*2)
		copy(nyys, assemblerS)
		assemblerS = nyys
	}
	assemblerS[assemblerp] = assemblerVAL
	assemblerS[assemblerp].yys = assemblerstate

assemblernewstate:
	assemblern = int(assemblerPact[assemblerstate])
	if assemblern <= assemblerFlag {
		goto assemblerdefault /* simple state */
	}
	if assemblerrcvr.char < 0 {
		assemblerrcvr.char, assemblertoken = assemblerlex1(assemblerlex, &assemblerrcvr.lval)
	}
	assemblern += assemblertoken
	if assemblern < 0 || assemblern >= assemblerLast {
		goto assemblerdefault
	}
	assemblern = int(assemblerAct[assemblern])
	if int(assemblerChk[assemblern]) == assemblertoken { /* valid shift */
		assemblerrcvr.char = -1
		assemblertoken = -1
		assemblerVAL = assemblerrcvr.lval
		assemblerstate = assemblern
		if Errflag > 0 {
			Errflag--
		}
		goto assemblerstack
	}

assemblerdefault:
	/* default state action */
	assemblern = int(assemblerDef[assemblerstate])
	if assemblern == -2 {
		if assemblerrcvr.char < 0 {
			assemblerrcvr.char, assemblertoken = assemblerlex1(assemblerlex, &assemblerrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if assemblerExca[xi+0] == -1 && int(assemblerExca[xi+1]) == assemblerstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			assemblern = int(assemblerExca[xi+0])
			if assemblern < 0 || assemblern == assemblertoken {
				break
			}
		}
		assemblern = int(assemblerExca[xi+1])
		if assemblern < 0 {
			goto ret0
		}
	}
	if assemblern == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			assemblerlex.Error(assemblerErrorMessage(assemblerstate, assemblertoken))
			Nerrs++
			if assemblerDebug >= 1 {
				__yyfmt__.Printf("%s", assemblerStatname(assemblerstate))
				__yyfmt__.Printf(" saw %s\n", assemblerTokname(assemblertoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for assemblerp >= 0 {
				assemblern = int(assemblerPact[assemblerS[assemblerp].yys]) + assemblerErrCode
				if assemblern >= 0 && assemblern < assemblerLast {
					assemblerstate = int(assemblerAct[assemblern]) /* simulate a shift of "error" */
					if int(assemblerChk[assemblerstate]) == assemblerErrCode {
						goto assemblerstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if assemblerDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", assemblerS[assemblerp].yys)
				}
				assemblerp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if assemblerDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", assemblerTokname(assemblertoken))
			}
			if assemblertoken == assemblerEofCode {
				goto ret1
			}
			assemblerrcvr.char = -1
			assemblertoken = -1
			goto assemblernewstate /* try again in the same state */
		}
	}

	/* reduction by production assemblern */
	if assemblerDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", assemblern, assemblerStatname(assemblerstate))
	}

	assemblernt := assemblern
	assemblerpt := assemblerp
	_ = assemblerpt // guard against "declared and not used"

	assemblerp -= int(assemblerR2[assemblern])
	// assemblerp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if assemblerp+1 >= len(assemblerS) {
		nyys := make([]assemblerSymType, len(assemblerS)*2)
		copy(nyys, assemblerS)
		assemblerS = nyys
	}
	assemblerVAL = assemblerS[assemblerp+1]

	/* consult goto table to find next state */
	assemblern = int(assemblerR1[assemblern])
	assemblerg := int(assemblerPgo[assemblern])
	assemblerj := assemblerg + assemblerS[assemblerp].yys + 1

	if assemblerj >= assemblerLast {
		assemblerstate = int(assemblerAct[assemblerg])
	} else {
		assemblerstate = int(assemblerAct[assemblerj])
		if int(assemblerChk[assemblerstate]) != -assemblern {
			assemblerstate = int(assemblerAct[assemblerg])
		}
	}
	// dummy call; replaced with literal code
	switch assemblernt {

	case 1:
		assemblerDollar = assemblerS[assemblerpt-0 : assemblerpt+1]
//line cmd/asm/assembler.y:30
		{
			fmt.Println("* empty program")
			assemblerVAL.program = &program{
				statements: make([]*statement, 0),
			}
			assemblerlex.(*lexer).program = assemblerVAL.program
		}
	case 2:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line cmd/asm/assembler.y:37
		{
			// $$.statements = append($1.statements, $2)
			fmt.Printf("* appendind stmt %v, stmt count %d\n", assemblerDollar[2].stmt, len(assemblerVAL.program.statements))
			assemblerVAL.program = &program{
				statements: append(assemblerDollar[1].program.statements, assemblerDollar[2].stmt),
			}
			assemblerlex.(*lexer).program = assemblerVAL.program
		}
	case 3:
		assemblerDollar = assemblerS[assemblerpt-0 : assemblerpt+1]
//line cmd/asm/assembler.y:46
		{
			fmt.Println("* comment or empty stmt")
			assemblerVAL.stmt = &statement{
				opcode: "comment",
			}
		}
	case 4:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line cmd/asm/assembler.y:52
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 5:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line cmd/asm/assembler.y:53
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 6:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line cmd/asm/assembler.y:54
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 7:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line cmd/asm/assembler.y:55
		{
			fmt.Printf("* stmt expr %v\n", assemblerVAL.stmt)
			assemblerVAL.stmt = &statement{
				opcode: "expr",
			}
		}
	case 8:
		assemblerDollar = assemblerS[assemblerpt-2 : assemblerpt+1]
//line cmd/asm/assembler.y:62
		{
			fmt.Printf("* label_stmt: %+v\n", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "label",
			}
		}
	case 9:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line cmd/asm/assembler.y:69
		{
			fmt.Printf("* li_stmt: %+v\n", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 10:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line cmd/asm/assembler.y:80
		{
			fmt.Printf("* lui_stmt: %+v\n", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 11:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line cmd/asm/assembler.y:91
		{
			assemblerVAL.expr = &numberExpression{Lit: assemblerDollar[1].tok.lit}
		}
	case 12:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line cmd/asm/assembler.y:94
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('+'), RHS: assemblerDollar[3].expr}
		}
	case 13:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line cmd/asm/assembler.y:97
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('-'), RHS: assemblerDollar[3].expr}
		}
	case 14:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line cmd/asm/assembler.y:100
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('*'), RHS: assemblerDollar[3].expr}
		}
	case 15:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line cmd/asm/assembler.y:103
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('/'), RHS: assemblerDollar[3].expr}
		}
	case 16:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line cmd/asm/assembler.y:106
		{
			assemblerVAL.expr = &parenExpression{SubExpr: assemblerDollar[2].expr}
		}
	}
	goto assemblerstack /* stack new state and value */
}
