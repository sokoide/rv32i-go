// Code generated by goyacc -p assembler -o pkg/rv32iasm/assembler.y.go pkg/rv32iasm/assembler.y. DO NOT EDIT.

//line pkg/rv32iasm/assembler.y:2
package rv32iasm

import __yyfmt__ "fmt"

//line pkg/rv32iasm/assembler.y:2

import (
	"github.com/sokoide/rv32i-go/pkg/rv32i"
	"strconv"

	log "github.com/sirupsen/logrus"
)

func chkerr(err error) {
	if err != nil {
		panic(err)
	}
}

//line pkg/rv32iasm/assembler.y:17
type assemblerSymType struct {
	yys     int
	program *Program
	stmt    *statement
	expr    expression
	tok     token
}

const LF = 57346
const COLON = 57347
const COMMA = 57348
const LP = 57349
const RP = 57350
const NUMBER = 57351
const IDENT = 57352
const REGISTER = 57353
const AUIPC = 57354
const LUI = 57355
const JAL = 57356
const JALR = 57357
const BEQ = 57358
const BNE = 57359
const BLT = 57360
const BGE = 57361
const BLTU = 57362
const BGEU = 57363
const LB = 57364
const LH = 57365
const LW = 57366
const LBU = 57367
const LHU = 57368
const SB = 57369
const SH = 57370
const SW = 57371
const ADDI = 57372
const SLTI = 57373
const SLTIU = 57374
const XORI = 57375
const ORI = 57376
const ANDI = 57377
const SLLI = 57378
const SRLI = 57379
const SRAI = 57380
const ADD = 57381
const SUB = 57382
const SLL = 57383
const SLT = 57384
const SLTU = 57385
const XOR = 57386
const SRL = 57387
const SRA = 57388
const OR = 57389
const AND = 57390
const BEQZ = 57391
const BNEZ = 57392
const BLEZ = 57393
const BGEZ = 57394
const BLTZ = 57395
const BGTZ = 57396
const BGT = 57397
const BLE = 57398
const BGTU = 57399
const BLEU = 57400
const CALL = 57401
const LA = 57402
const LI = 57403
const MV = 57404
const NEG = 57405
const NOP = 57406
const NOT = 57407
const SEQZ = 57408
const SNEZ = 57409
const SLTZ = 57410
const SGTZ = 57411
const RET = 57412

var assemblerToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LF",
	"COLON",
	"COMMA",
	"LP",
	"RP",
	"NUMBER",
	"IDENT",
	"REGISTER",
	"AUIPC",
	"LUI",
	"JAL",
	"JALR",
	"BEQ",
	"BNE",
	"BLT",
	"BGE",
	"BLTU",
	"BGEU",
	"LB",
	"LH",
	"LW",
	"LBU",
	"LHU",
	"SB",
	"SH",
	"SW",
	"ADDI",
	"SLTI",
	"SLTIU",
	"XORI",
	"ORI",
	"ANDI",
	"SLLI",
	"SRLI",
	"SRAI",
	"ADD",
	"SUB",
	"SLL",
	"SLT",
	"SLTU",
	"XOR",
	"SRL",
	"SRA",
	"OR",
	"AND",
	"BEQZ",
	"BNEZ",
	"BLEZ",
	"BGEZ",
	"BLTZ",
	"BGTZ",
	"BGT",
	"BLE",
	"BGTU",
	"BLEU",
	"CALL",
	"LA",
	"LI",
	"MV",
	"NEG",
	"NOP",
	"NOT",
	"SEQZ",
	"SNEZ",
	"SLTZ",
	"SGTZ",
	"RET",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'('",
	"')'",
}

var assemblerStatenames = [...]string{}

const assemblerEofCode = 1
const assemblerErrCode = 2
const assemblerInitialStackSize = 16

//line pkg/rv32iasm/assembler.y:865

//line yacctab:1
var assemblerExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 3,
}

const assemblerPrivate = 57344

const assemblerLast = 407

var assemblerAct = [...]int16{
	124, 123, 63, 65, 64, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 106, 105, 104, 107, 108, 109, 110,
	111, 113, 112, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 136, 124, 135, 306, 125, 127, 128, 129,
	130, 386, 255, 127, 128, 129, 130, 129, 130, 181,
	180, 134, 133, 385, 384, 383, 382, 381, 380, 379,
	378, 377, 367, 366, 365, 364, 363, 362, 361, 360,
	353, 313, 312, 311, 310, 309, 308, 307, 303, 302,
	301, 300, 293, 292, 291, 290, 289, 288, 287, 286,
	285, 284, 283, 282, 281, 280, 279, 278, 192, 125,
	193, 194, 195, 196, 277, 276, 275, 266, 265, 264,
	263, 262, 261, 260, 190, 189, 188, 187, 186, 185,
	184, 183, 182, 179, 178, 177, 176, 175, 174, 173,
	172, 171, 170, 169, 168, 167, 166, 165, 164, 163,
	162, 161, 160, 159, 158, 157, 156, 155, 154, 153,
	152, 151, 150, 149, 148, 147, 146, 145, 144, 143,
	142, 141, 140, 139, 138, 137, 132, 131, 304, 390,
	389, 388, 387, 376, 375, 374, 373, 372, 371, 370,
	369, 368, 359, 358, 357, 356, 355, 354, 305, 299,
	298, 297, 296, 295, 294, 274, 273, 272, 271, 270,
	269, 268, 267, 259, 258, 257, 256, 399, 398, 397,
	396, 395, 394, 393, 392, 391, 315, 329, 328, 327,
	326, 325, 324, 323, 322, 314, 201, 352, 351, 350,
	349, 348, 347, 346, 345, 344, 343, 342, 341, 340,
	339, 338, 337, 336, 335, 334, 333, 332, 331, 330,
	321, 320, 319, 318, 317, 316, 254, 253, 252, 251,
	250, 249, 248, 247, 246, 245, 244, 243, 242, 241,
	240, 239, 238, 237, 236, 235, 234, 233, 232, 231,
	230, 229, 228, 227, 226, 225, 224, 223, 222, 221,
	220, 219, 218, 217, 216, 215, 214, 213, 212, 211,
	210, 209, 208, 207, 206, 205, 204, 203, 202, 200,
	199, 198, 197, 191, 126, 62, 61, 60, 59, 58,
	57, 56, 55, 54, 53, 51, 52, 50, 49, 48,
	47, 46, 43, 44, 45, 42, 41, 40, 39, 38,
	37, 36, 35, 34, 33, 32, 31, 30, 29, 28,
	27, 26, 25, 24, 23, 22, 21, 20, 19, 18,
	17, 16, 15, 14, 13, 12, 11, 10, 9, 8,
	7, 6, 5, 4, 3, 2, 1,
}

var assemblerPact = [...]int16{
	-1000, -9, 340, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2, 186, 185, 71, 53, 184, 183,
	182, 181, 180, 179, 178, 177, 176, 175, 174, 173,
	172, 171, 170, 169, 168, 167, 166, 165, 164, 163,
	162, 161, 160, 159, 158, 157, 156, 155, 154, 153,
	152, 151, 150, 149, 148, 147, 146, 145, 144, 143,
	142, 69, 141, 140, 139, 138, -1000, 137, 136, 135,
	134, 133, -1000, 338, -1000, 54, -1000, 54, 54, 54,
	54, 336, 335, 334, -1000, 333, 249, 332, 331, 330,
	329, 328, 327, 326, 325, 324, 323, 322, 321, 320,
	319, 318, 317, 316, 315, 314, 313, 312, 311, 310,
	309, 308, 307, 306, 305, 304, 303, 302, 301, 300,
	299, 298, 297, 296, 295, 294, 293, 292, 291, 290,
	289, -1000, 288, 287, 286, 285, 284, 283, 282, 281,
	280, -1000, -4, 4, 4, -1000, -1000, 227, 226, 225,
	224, 132, 131, 130, 129, 128, 127, 126, 223, 222,
	221, 220, 219, 218, 217, 216, 125, 124, 123, 116,
	115, 114, 113, 112, 111, 110, 109, 108, 107, 106,
	105, 104, 103, 102, 101, 215, 214, 213, 212, 211,
	210, 100, 99, 98, 97, 188, 209, 55, 96, 95,
	94, 93, 92, 91, 90, -1000, -1000, -1000, -1000, 248,
	238, 279, 278, 277, 276, 275, 274, 247, 246, 245,
	244, 243, 242, 241, 240, 273, 272, 271, 270, 269,
	268, 267, 266, 265, 264, 263, 262, 261, 260, 259,
	258, 257, 256, 255, -1000, -1000, -1000, -1000, -1000, -1000,
	254, 253, 252, 251, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 89, -1000, 208, 207, 206, 205,
	204, 203, 88, 87, 86, 85, 84, 83, 82, 81,
	202, 201, 200, 199, 198, 197, 196, 195, 194, 80,
	79, 78, 77, 76, 75, 74, 73, 72, 60, 193,
	192, 191, 190, 237, -1000, -1000, -1000, -1000, -1000, -1000,
	236, 235, 234, 233, 232, 231, 230, 229, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var assemblerPgo = [...]int16{
	0, 406, 405, 404, 403, 402, 401, 400, 399, 398,
	397, 396, 395, 394, 393, 392, 391, 390, 389, 388,
	387, 386, 385, 384, 383, 382, 381, 380, 379, 378,
	377, 376, 375, 374, 373, 372, 371, 370, 369, 368,
	367, 366, 365, 364, 363, 362, 361, 360, 359, 358,
	357, 356, 355, 354, 353, 352, 351, 350, 349, 348,
	347, 346, 345, 2,
}

var assemblerR1 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 4, 5, 5, 6,
	6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 50, 52, 51, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 63,
	63, 63, 63, 63,
}

var assemblerR2 = [...]int8{
	0, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 2, 7,
	5, 6, 6, 6, 6, 6, 6, 7, 7, 7,
	7, 7, 7, 7, 7, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 4, 4, 4, 4, 4, 4,
	6, 6, 6, 6, 4, 2, 4, 4, 4, 4,
	1, 4, 4, 4, 4, 4, 1, 2, 1, 3,
	3, 3, 3, 3,
}

var assemblerChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -9,
	-10, -11, -12, -13, -14, -15, -16, -17, -18, -19,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -39,
	-40, -41, -42, -45, -44, -43, -46, -47, -48, -49,
	-50, -52, -51, -53, -54, -55, -56, -57, -58, -59,
	-60, -61, -62, -63, 13, 12, 14, 15, 16, 17,
	18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 54, 53, 52, 55, 56, 57,
	58, 59, 61, 60, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 10, 9, 75, 4, 71, 72, 73,
	74, 11, 11, 11, 10, 11, 9, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 10, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 5, -63, -63, -63, -63, -63, 6, 6, 6,
	6, 7, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 76, 9, 9, 9, 9,
	11, 11, 11, 11, 11, 11, 11, 9, 9, 9,
	9, 9, 9, 9, 9, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 9, 9, 9, 9, 9, 9,
	11, 11, 11, 11, 10, 9, 10, 11, 11, 11,
	11, 11, 11, 11, 7, 8, 6, 6, 6, 6,
	6, 6, 7, 7, 7, 7, 7, 7, 7, 7,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 11, 9, 9, 9, 9, 9, 9,
	11, 11, 11, 11, 11, 11, 11, 11, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 9, 9, 9,
	9, 8, 8, 8, 8, 8, 8, 8, 8, 8,
}

var assemblerDef = [...]int16{
	1, -2, 0, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	0, 0, 126, 0, 128, 0, 2, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 129, 130, 131, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 65, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 109, 108, 107,
	0, 0, 0, 0, 114, 116, 117, 118, 119, 121,
	122, 123, 124, 125, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 72, 73, 74, 75, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 110, 111, 112,
	113, 69, 77, 78, 79, 80, 81, 82, 83, 84,
}

var assemblerTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	75, 76, 73, 71, 3, 72, 3, 74,
}

var assemblerTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70,
}

var assemblerTok3 = [...]int8{
	0,
}

var assemblerErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	assemblerDebug        = 0
	assemblerErrorVerbose = false
)

type assemblerLexer interface {
	Lex(lval *assemblerSymType) int
	Error(s string)
}

type assemblerParser interface {
	Parse(assemblerLexer) int
	Lookahead() int
}

type assemblerParserImpl struct {
	lval  assemblerSymType
	stack [assemblerInitialStackSize]assemblerSymType
	char  int
}

func (p *assemblerParserImpl) Lookahead() int {
	return p.char
}

func assemblerNewParser() assemblerParser {
	return &assemblerParserImpl{}
}

const assemblerFlag = -1000

func assemblerTokname(c int) string {
	if c >= 1 && c-1 < len(assemblerToknames) {
		if assemblerToknames[c-1] != "" {
			return assemblerToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func assemblerStatname(s int) string {
	if s >= 0 && s < len(assemblerStatenames) {
		if assemblerStatenames[s] != "" {
			return assemblerStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func assemblerErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !assemblerErrorVerbose {
		return "syntax error"
	}

	for _, e := range assemblerErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + assemblerTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(assemblerPact[state])
	for tok := TOKSTART; tok-1 < len(assemblerToknames); tok++ {
		if n := base + tok; n >= 0 && n < assemblerLast && int(assemblerChk[int(assemblerAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if assemblerDef[state] == -2 {
		i := 0
		for assemblerExca[i] != -1 || int(assemblerExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; assemblerExca[i] >= 0; i += 2 {
			tok := int(assemblerExca[i])
			if tok < TOKSTART || assemblerExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if assemblerExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += assemblerTokname(tok)
	}
	return res
}

func assemblerlex1(lex assemblerLexer, lval *assemblerSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(assemblerTok1[0])
		goto out
	}
	if char < len(assemblerTok1) {
		token = int(assemblerTok1[char])
		goto out
	}
	if char >= assemblerPrivate {
		if char < assemblerPrivate+len(assemblerTok2) {
			token = int(assemblerTok2[char-assemblerPrivate])
			goto out
		}
	}
	for i := 0; i < len(assemblerTok3); i += 2 {
		token = int(assemblerTok3[i+0])
		if token == char {
			token = int(assemblerTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(assemblerTok2[1]) /* unknown char */
	}
	if assemblerDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", assemblerTokname(token), uint(char))
	}
	return char, token
}

func assemblerParse(assemblerlex assemblerLexer) int {
	return assemblerNewParser().Parse(assemblerlex)
}

func (assemblerrcvr *assemblerParserImpl) Parse(assemblerlex assemblerLexer) int {
	var assemblern int
	var assemblerVAL assemblerSymType
	var assemblerDollar []assemblerSymType
	_ = assemblerDollar // silence set and not used
	assemblerS := assemblerrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	assemblerstate := 0
	assemblerrcvr.char = -1
	assemblertoken := -1 // assemblerrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		assemblerstate = -1
		assemblerrcvr.char = -1
		assemblertoken = -1
	}()
	assemblerp := -1
	goto assemblerstack

ret0:
	return 0

ret1:
	return 1

assemblerstack:
	/* put a state and value onto the stack */
	if assemblerDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", assemblerTokname(assemblertoken), assemblerStatname(assemblerstate))
	}

	assemblerp++
	if assemblerp >= len(assemblerS) {
		nyys := make([]assemblerSymType, len(assemblerS)*2)
		copy(nyys, assemblerS)
		assemblerS = nyys
	}
	assemblerS[assemblerp] = assemblerVAL
	assemblerS[assemblerp].yys = assemblerstate

assemblernewstate:
	assemblern = int(assemblerPact[assemblerstate])
	if assemblern <= assemblerFlag {
		goto assemblerdefault /* simple state */
	}
	if assemblerrcvr.char < 0 {
		assemblerrcvr.char, assemblertoken = assemblerlex1(assemblerlex, &assemblerrcvr.lval)
	}
	assemblern += assemblertoken
	if assemblern < 0 || assemblern >= assemblerLast {
		goto assemblerdefault
	}
	assemblern = int(assemblerAct[assemblern])
	if int(assemblerChk[assemblern]) == assemblertoken { /* valid shift */
		assemblerrcvr.char = -1
		assemblertoken = -1
		assemblerVAL = assemblerrcvr.lval
		assemblerstate = assemblern
		if Errflag > 0 {
			Errflag--
		}
		goto assemblerstack
	}

assemblerdefault:
	/* default state action */
	assemblern = int(assemblerDef[assemblerstate])
	if assemblern == -2 {
		if assemblerrcvr.char < 0 {
			assemblerrcvr.char, assemblertoken = assemblerlex1(assemblerlex, &assemblerrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if assemblerExca[xi+0] == -1 && int(assemblerExca[xi+1]) == assemblerstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			assemblern = int(assemblerExca[xi+0])
			if assemblern < 0 || assemblern == assemblertoken {
				break
			}
		}
		assemblern = int(assemblerExca[xi+1])
		if assemblern < 0 {
			goto ret0
		}
	}
	if assemblern == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			assemblerlex.Error(assemblerErrorMessage(assemblerstate, assemblertoken))
			Nerrs++
			if assemblerDebug >= 1 {
				__yyfmt__.Printf("%s", assemblerStatname(assemblerstate))
				__yyfmt__.Printf(" saw %s\n", assemblerTokname(assemblertoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for assemblerp >= 0 {
				assemblern = int(assemblerPact[assemblerS[assemblerp].yys]) + assemblerErrCode
				if assemblern >= 0 && assemblern < assemblerLast {
					assemblerstate = int(assemblerAct[assemblern]) /* simulate a shift of "error" */
					if int(assemblerChk[assemblerstate]) == assemblerErrCode {
						goto assemblerstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if assemblerDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", assemblerS[assemblerp].yys)
				}
				assemblerp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if assemblerDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", assemblerTokname(assemblertoken))
			}
			if assemblertoken == assemblerEofCode {
				goto ret1
			}
			assemblerrcvr.char = -1
			assemblertoken = -1
			goto assemblernewstate /* try again in the same state */
		}
	}

	/* reduction by production assemblern */
	if assemblerDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", assemblern, assemblerStatname(assemblerstate))
	}

	assemblernt := assemblern
	assemblerpt := assemblerp
	_ = assemblerpt // guard against "declared and not used"

	assemblerp -= int(assemblerR2[assemblern])
	// assemblerp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if assemblerp+1 >= len(assemblerS) {
		nyys := make([]assemblerSymType, len(assemblerS)*2)
		copy(nyys, assemblerS)
		assemblerS = nyys
	}
	assemblerVAL = assemblerS[assemblerp+1]

	/* consult goto table to find next state */
	assemblern = int(assemblerR1[assemblern])
	assemblerg := int(assemblerPgo[assemblern])
	assemblerj := assemblerg + assemblerS[assemblerp].yys + 1

	if assemblerj >= assemblerLast {
		assemblerstate = int(assemblerAct[assemblerg])
	} else {
		assemblerstate = int(assemblerAct[assemblerj])
		if int(assemblerChk[assemblerstate]) != -assemblern {
			assemblerstate = int(assemblerAct[assemblerg])
		}
	}
	// dummy call; replaced with literal code
	switch assemblernt {

	case 1:
		assemblerDollar = assemblerS[assemblerpt-0 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:57
		{
			log.Debug("* empty program")
			assemblerVAL.program = &Program{
				statements: make([]*statement, 0),
			}
			assemblerlex.(*lexer).program = assemblerVAL.program
		}
	case 2:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:64
		{
			log.Debugf("* appendind stmt %v, stmt count %d", assemblerDollar[2].stmt, len(assemblerVAL.program.statements))
			assemblerVAL.program = &Program{
				statements: append(assemblerDollar[1].program.statements, assemblerDollar[2].stmt),
			}
			assemblerlex.(*lexer).program = assemblerVAL.program
		}
	case 3:
		assemblerDollar = assemblerS[assemblerpt-0 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:72
		{
			log.Debug("* comment or empty stmt")
			assemblerVAL.stmt = &statement{
				opcode: "comment",
			}
		}
	case 4:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:78
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 5:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:79
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 6:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:80
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 7:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:81
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 8:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:82
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 9:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:83
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 10:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:84
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 11:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:85
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 12:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:86
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 13:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:87
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 14:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:88
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 15:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:89
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 16:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:90
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 17:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:91
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 18:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:92
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 19:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:93
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 20:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:94
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 21:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:95
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 22:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:96
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 23:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:97
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 24:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:98
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 25:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:99
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 26:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:100
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 27:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:101
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 28:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:102
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 29:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:103
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 30:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:104
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 31:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:105
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 32:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:106
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 33:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:107
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 34:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:108
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 35:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:109
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 36:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:110
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 37:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:111
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 38:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:112
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 39:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:113
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 40:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:114
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 41:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:116
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 42:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:117
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 43:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:118
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 44:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:119
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 45:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:120
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 46:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:121
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 47:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:122
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 48:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:123
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 49:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:124
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 50:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:125
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 51:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:126
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 52:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:127
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 53:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:128
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 54:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:129
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 55:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:130
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 56:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:131
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 57:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:132
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 58:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:133
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 59:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:134
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 60:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:135
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 61:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:136
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 62:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:137
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 63:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:138
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 64:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:139
		{
			log.Debugf("* stmt expr %v", assemblerVAL.stmt)
			assemblerVAL.stmt = &statement{
				opcode: "expr",
			}
		}
	case 65:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:146
		{
			log.Debugf("* lui_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 66:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:157
		{
			log.Debugf("* auipc_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 67:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:168
		{
			log.Debugf("* jal_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 68:
		assemblerDollar = assemblerS[assemblerpt-2 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:178
		{
			log.Debugf("* jal_stmt (label): %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    1, // if rd is omitted, defaults to x1
				str1:   assemblerDollar[2].tok.lit,
			}
		}
	case 69:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:187
		{
			log.Debugf("* jalr_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 70:
		assemblerDollar = assemblerS[assemblerpt-5 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:198
		{
			log.Debugf("* jalr_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[2].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    1, // if rd is omitted, defaults to x1
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[4].tok.lit],
			}
		}
	case 71:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:210
		{
			log.Debugf("* beq_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "beq",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 72:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:222
		{
			log.Debugf("* bne_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bne",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 73:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:234
		{
			log.Debugf("* blt_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "blt",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 74:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:246
		{
			log.Debugf("* bge_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bge",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 75:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:258
		{
			log.Debugf("* bltu_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bltu",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 76:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:270
		{
			log.Debugf("* bgeu_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bgeu",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 77:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:282
		{
			log.Debugf("* lb_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 78:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:294
		{
			log.Debugf("* lh_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 79:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:306
		{
			log.Debugf("* lw_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 80:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:318
		{
			log.Debugf("* lbu_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 81:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:330
		{
			log.Debugf("* lhu_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 82:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:342
		{
			log.Debugf("* sb_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 83:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:354
		{
			log.Debugf("* sh_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 84:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:366
		{
			log.Debugf("* sw_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 85:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:378
		{
			log.Debugf("* addi_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 86:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:390
		{
			log.Debugf("* slti_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 87:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:402
		{
			log.Debugf("* sltiu_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 88:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:414
		{
			log.Debugf("* xori_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 89:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:426
		{
			log.Debugf("* ori_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 90:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:438
		{
			log.Debugf("* andi_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 91:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:450
		{
			log.Debugf("* slli_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 92:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:462
		{
			log.Debugf("* srli_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 93:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:474
		{
			log.Debugf("* srai_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 94:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:486
		{
			log.Debugf("* add_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 95:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:496
		{
			log.Debugf("* sub_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 96:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:506
		{
			log.Debugf("* sll_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 97:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:516
		{
			log.Debugf("* slt_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 98:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:526
		{
			log.Debugf("* sltu_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 99:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:536
		{
			log.Debugf("* xor_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 100:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:546
		{
			log.Debugf("* srl_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 101:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:556
		{
			log.Debugf("* sra_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 102:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:566
		{
			log.Debugf("* or_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 103:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:576
		{
			log.Debugf("* and_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 104:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:587
		{
			log.Debugf("* beqz_stmt")
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "beq",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    0,
				op3:    val,
			}
		}
	case 105:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:599
		{
			log.Debugf("* bnez_stmt")
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bne",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    0,
				op3:    val,
			}
		}
	case 106:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:611
		{
			log.Debugf("* blez_stmt")
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bge",
				op1:    0,
				op2:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op3:    val,
			}
		}
	case 107:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:623
		{
			log.Debugf("* bgez_stmt")
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bge",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    0,
				op3:    val,
			}
		}
	case 108:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:635
		{
			log.Debugf("* bltz_stmt")
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "blt",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    0,
				op3:    val,
			}
		}
	case 109:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:647
		{
			log.Debugf("* bgtz_stmt")
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "blt",
				op1:    0,
				op2:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op3:    val,
			}
		}
	case 110:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:659
		{
			log.Debugf("* bgt_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "blt",
				op1:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op3:    val,
			}
		}
	case 111:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:671
		{
			log.Debugf("* ble_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bge",
				op1:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op3:    val,
			}
		}
	case 112:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:683
		{
			log.Debugf("* bgtu_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bltu",
				op1:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op3:    val,
			}
		}
	case 113:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:695
		{
			log.Debugf("* bleu_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bgeu",
				op1:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op3:    val,
			}
		}
	case 114:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:707
		{
			log.Debugf("* call_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				str1:   assemblerDollar[4].tok.lit,
			}
		}
	case 115:
		assemblerDollar = assemblerS[assemblerpt-2 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:715
		{
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    1, // if rd is omitted, defaults to x1
				str1:   assemblerDollar[2].tok.lit,
			}
		}
	case 116:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:723
		{
			log.Debugf("* li_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 117:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:734
		{
			log.Debugf("* la_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				str1:   assemblerDollar[4].tok.lit,
			}
		}
	case 118:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:743
		{
			log.Debugf("* mv_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "addi",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
			}
		}
	case 119:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:752
		{
			log.Debugf("* neg_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "sub",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    0,
				op3:    rv32i.Regs[assemblerDollar[4].tok.lit],
			}
		}
	case 120:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:762
		{
			log.Debugf("* nop_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "addi",
				op1:    0,
				op2:    0,
				op3:    0,
			}
		}
	case 121:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:772
		{
			log.Debugf("* not_stmt: %+v", assemblerDollar[1].tok)
			// $$ = &statement{
			//     opcode: "xori",
			//     op1: rv32i.Regs[$2.lit],
			//     op2: rv32i.Regs[$4.lit],
			//     op3: -1,
			// }
			assemblerVAL.stmt = &statement{
				opcode: "xori",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    -1,
			}
		}
	case 122:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:788
		{
			log.Debugf("* seqz_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "sltiu",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    1,
			}
		}
	case 123:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:798
		{
			log.Debugf("* snez_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "sltu",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    0,
				op3:    rv32i.Regs[assemblerDollar[4].tok.lit],
			}
		}
	case 124:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:808
		{
			log.Debugf("* sltz_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "slt",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    0,
			}
		}
	case 125:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:818
		{
			log.Debugf("* sgtz_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "slt",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    0,
				op3:    rv32i.Regs[assemblerDollar[4].tok.lit],
			}
		}
	case 126:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:828
		{
			log.Debugf("* ret_stmt")
			assemblerVAL.stmt = &statement{
				opcode: "jalr",
				op1:    0,
				op2:    0,
				op3:    1,
			}
		}
	case 127:
		assemblerDollar = assemblerS[assemblerpt-2 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:838
		{
			log.Debugf("* label_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "label",
				str1:   assemblerDollar[1].tok.lit,
			}
		}
	case 128:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:846
		{
			assemblerVAL.expr = &numberExpression{Lit: assemblerDollar[1].tok.lit}
		}
	case 129:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:849
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('+'), RHS: assemblerDollar[3].expr}
		}
	case 130:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:852
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('-'), RHS: assemblerDollar[3].expr}
		}
	case 131:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:855
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('*'), RHS: assemblerDollar[3].expr}
		}
	case 132:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:858
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('/'), RHS: assemblerDollar[3].expr}
		}
	case 133:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:861
		{
			assemblerVAL.expr = &parenExpression{SubExpr: assemblerDollar[2].expr}
		}
	}
	goto assemblerstack /* stack new state and value */
}
