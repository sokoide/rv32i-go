// Code generated by goyacc -p assembler -o pkg/rv32iasm/assembler.y.go pkg/rv32iasm/assembler.y. DO NOT EDIT.

//line pkg/rv32iasm/assembler.y:2
package rv32iasm

import __yyfmt__ "fmt"

//line pkg/rv32iasm/assembler.y:2

import (
	"github.com/sokoide/rv32i-go/pkg/rv32i"
	"strconv"

	log "github.com/sirupsen/logrus"
)

func chkerr(err error) {
	if err != nil {
		panic(err)
	}
}

//line pkg/rv32iasm/assembler.y:17
type assemblerSymType struct {
	yys     int
	program *Program
	stmt    *statement
	expr    expression
	tok     token
}

const LF = 57346
const COLON = 57347
const COMMA = 57348
const LP = 57349
const RP = 57350
const NUMBER = 57351
const IDENT = 57352
const REGISTER = 57353
const AUIPC = 57354
const LUI = 57355
const JAL = 57356
const JALR = 57357
const BEQ = 57358
const BNE = 57359
const BLT = 57360
const BGE = 57361
const BLTU = 57362
const BGEU = 57363
const LB = 57364
const LH = 57365
const LW = 57366
const LBU = 57367
const LHU = 57368
const SB = 57369
const SH = 57370
const SW = 57371
const ADDI = 57372
const SLTI = 57373
const SLTIU = 57374
const XORI = 57375
const ORI = 57376
const ANDI = 57377
const SLLI = 57378
const SRLI = 57379
const SRAI = 57380
const ADD = 57381
const SUB = 57382
const SLL = 57383
const SLT = 57384
const SLTU = 57385
const XOR = 57386
const SRL = 57387
const SRA = 57388
const OR = 57389
const AND = 57390
const LI = 57391
const SEQZ = 57392
const RET = 57393

var assemblerToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LF",
	"COLON",
	"COMMA",
	"LP",
	"RP",
	"NUMBER",
	"IDENT",
	"REGISTER",
	"AUIPC",
	"LUI",
	"JAL",
	"JALR",
	"BEQ",
	"BNE",
	"BLT",
	"BGE",
	"BLTU",
	"BGEU",
	"LB",
	"LH",
	"LW",
	"LBU",
	"LHU",
	"SB",
	"SH",
	"SW",
	"ADDI",
	"SLTI",
	"SLTIU",
	"XORI",
	"ORI",
	"ANDI",
	"SLLI",
	"SRLI",
	"SRAI",
	"ADD",
	"SUB",
	"SLL",
	"SLT",
	"SLTU",
	"XOR",
	"SRL",
	"SRA",
	"OR",
	"AND",
	"LI",
	"SEQZ",
	"RET",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'('",
	"')'",
}

var assemblerStatenames = [...]string{}

const assemblerEofCode = 1
const assemblerErrCode = 2
const assemblerInitialStackSize = 16

//line pkg/rv32iasm/assembler.y:619

//line yacctab:1
var assemblerExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 3,
}

const assemblerPrivate = 57344

const assemblerLast = 306

var assemblerAct = [...]int16{
	86, 85, 44, 46, 45, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 98, 86, 97, 279, 87, 89, 90,
	91, 92, 289, 180, 89, 90, 91, 92, 91, 92,
	96, 95, 288, 287, 286, 285, 284, 283, 282, 281,
	280, 270, 269, 268, 267, 266, 265, 264, 263, 256,
	220, 218, 217, 216, 215, 214, 213, 212, 211, 210,
	135, 87, 136, 137, 138, 139, 209, 208, 207, 206,
	205, 204, 203, 202, 201, 200, 191, 190, 189, 188,
	187, 186, 185, 133, 132, 131, 130, 129, 128, 127,
	126, 125, 124, 123, 122, 121, 120, 119, 118, 117,
	116, 115, 114, 113, 112, 111, 110, 109, 108, 107,
	106, 105, 104, 103, 102, 101, 100, 99, 94, 93,
	278, 277, 276, 275, 274, 273, 272, 271, 262, 261,
	260, 259, 258, 257, 219, 199, 198, 197, 196, 195,
	194, 193, 192, 184, 183, 182, 181, 298, 297, 296,
	295, 294, 293, 292, 291, 290, 222, 236, 235, 234,
	233, 232, 231, 230, 229, 221, 144, 255, 254, 253,
	252, 251, 250, 249, 248, 247, 246, 245, 244, 243,
	242, 241, 240, 239, 238, 237, 228, 227, 226, 225,
	224, 223, 179, 178, 177, 176, 175, 174, 173, 172,
	171, 170, 169, 168, 167, 166, 165, 164, 163, 162,
	161, 160, 159, 158, 157, 156, 155, 154, 153, 152,
	151, 150, 149, 148, 147, 146, 145, 143, 142, 141,
	140, 134, 88, 43, 42, 41, 40, 39, 38, 37,
	36, 35, 34, 33, 32, 31, 30, 29, 28, 27,
	26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
	16, 15, 14, 13, 12, 11, 10, 9, 8, 7,
	6, 5, 4, 3, 2, 1,
}

var assemblerPact = [...]int16{
	-1000, -9, 258, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2, 138, 137, 50, 34, 136,
	135, 134, 133, 132, 131, 130, 129, 128, 127, 126,
	125, 124, 123, 122, 121, 120, 119, 118, 117, 116,
	115, 114, 113, 112, 111, 110, 109, 108, 107, 106,
	105, 104, 103, 102, -1000, 256, -1000, 35, -1000, 35,
	35, 35, 35, 254, 253, 252, -1000, 251, 189, 250,
	249, 248, 247, 246, 245, 244, 243, 242, 241, 240,
	239, 238, 237, 236, 235, 234, 233, 232, 231, 230,
	229, 228, 227, 226, 225, 224, 223, 222, 221, 220,
	219, 218, 217, 216, -1000, -4, 4, 4, -1000, -1000,
	167, 166, 165, 164, 101, 100, 99, 98, 97, 96,
	95, 163, 162, 161, 160, 159, 158, 157, 156, 94,
	93, 92, 91, 90, 89, 88, 87, 86, 85, 78,
	77, 76, 75, 74, 73, 72, 71, 70, 155, 69,
	-1000, -1000, -1000, -1000, 188, 178, 215, 214, 213, 212,
	211, 210, 187, 186, 185, 184, 183, 182, 181, 180,
	209, 208, 207, 206, 205, 204, 203, 202, 201, 200,
	199, 198, 197, 196, 195, 194, 193, 192, 191, -1000,
	-1000, 68, -1000, 154, 153, 152, 151, 150, 149, 67,
	66, 65, 64, 63, 62, 61, 60, 148, 147, 146,
	145, 144, 143, 142, 141, 37, 59, 58, 57, 56,
	55, 54, 53, 52, 51, 41, 177, -1000, -1000, -1000,
	-1000, -1000, -1000, 176, 175, 174, 173, 172, 171, 170,
	169, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var assemblerPgo = [...]int16{
	0, 305, 304, 303, 302, 301, 300, 299, 298, 297,
	296, 295, 294, 293, 292, 291, 290, 289, 288, 287,
	286, 285, 284, 283, 282, 281, 280, 279, 278, 277,
	276, 275, 274, 273, 272, 271, 270, 269, 268, 267,
	266, 265, 264, 263, 2,
}

var assemblerR1 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 4, 5, 5,
	6, 6, 7, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	44, 44, 44, 44, 44,
}

var assemblerR2 = [...]int8{
	0, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 4, 2,
	7, 5, 6, 6, 6, 6, 6, 6, 7, 7,
	7, 7, 7, 7, 7, 7, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 4, 4, 1, 2, 1,
	3, 3, 3, 3, 3,
}

var assemblerChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -9,
	-10, -11, -12, -13, -14, -15, -16, -17, -18, -19,
	-20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
	-30, -31, -32, -33, -34, -35, -36, -37, -38, -39,
	-40, -41, -42, -43, -44, 13, 12, 14, 15, 16,
	17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 10, 9, 56, 4, 52,
	53, 54, 55, 11, 11, 11, 10, 11, 9, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 5, -44, -44, -44, -44, -44,
	6, 6, 6, 6, 7, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	57, 9, 9, 9, 9, 11, 11, 11, 11, 11,
	11, 11, 9, 9, 9, 9, 9, 9, 9, 9,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 9,
	11, 7, 8, 6, 6, 6, 6, 6, 6, 7,
	7, 7, 7, 7, 7, 7, 7, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 11, 9, 9, 9,
	9, 9, 9, 11, 11, 11, 11, 11, 11, 11,
	11, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	8, 8, 8, 8, 8, 8, 8, 8, 8,
}

var assemblerDef = [...]int8{
	1, -2, 0, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 89, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 90, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 46, 47, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 53, 54,
	55, 56, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	50, 58, 59, 60, 61, 62, 63, 64, 65,
}

var assemblerTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	56, 57, 54, 52, 3, 53, 3, 55,
}

var assemblerTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
}

var assemblerTok3 = [...]int8{
	0,
}

var assemblerErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	assemblerDebug        = 0
	assemblerErrorVerbose = false
)

type assemblerLexer interface {
	Lex(lval *assemblerSymType) int
	Error(s string)
}

type assemblerParser interface {
	Parse(assemblerLexer) int
	Lookahead() int
}

type assemblerParserImpl struct {
	lval  assemblerSymType
	stack [assemblerInitialStackSize]assemblerSymType
	char  int
}

func (p *assemblerParserImpl) Lookahead() int {
	return p.char
}

func assemblerNewParser() assemblerParser {
	return &assemblerParserImpl{}
}

const assemblerFlag = -1000

func assemblerTokname(c int) string {
	if c >= 1 && c-1 < len(assemblerToknames) {
		if assemblerToknames[c-1] != "" {
			return assemblerToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func assemblerStatname(s int) string {
	if s >= 0 && s < len(assemblerStatenames) {
		if assemblerStatenames[s] != "" {
			return assemblerStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func assemblerErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !assemblerErrorVerbose {
		return "syntax error"
	}

	for _, e := range assemblerErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + assemblerTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(assemblerPact[state])
	for tok := TOKSTART; tok-1 < len(assemblerToknames); tok++ {
		if n := base + tok; n >= 0 && n < assemblerLast && int(assemblerChk[int(assemblerAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if assemblerDef[state] == -2 {
		i := 0
		for assemblerExca[i] != -1 || int(assemblerExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; assemblerExca[i] >= 0; i += 2 {
			tok := int(assemblerExca[i])
			if tok < TOKSTART || assemblerExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if assemblerExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += assemblerTokname(tok)
	}
	return res
}

func assemblerlex1(lex assemblerLexer, lval *assemblerSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(assemblerTok1[0])
		goto out
	}
	if char < len(assemblerTok1) {
		token = int(assemblerTok1[char])
		goto out
	}
	if char >= assemblerPrivate {
		if char < assemblerPrivate+len(assemblerTok2) {
			token = int(assemblerTok2[char-assemblerPrivate])
			goto out
		}
	}
	for i := 0; i < len(assemblerTok3); i += 2 {
		token = int(assemblerTok3[i+0])
		if token == char {
			token = int(assemblerTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(assemblerTok2[1]) /* unknown char */
	}
	if assemblerDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", assemblerTokname(token), uint(char))
	}
	return char, token
}

func assemblerParse(assemblerlex assemblerLexer) int {
	return assemblerNewParser().Parse(assemblerlex)
}

func (assemblerrcvr *assemblerParserImpl) Parse(assemblerlex assemblerLexer) int {
	var assemblern int
	var assemblerVAL assemblerSymType
	var assemblerDollar []assemblerSymType
	_ = assemblerDollar // silence set and not used
	assemblerS := assemblerrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	assemblerstate := 0
	assemblerrcvr.char = -1
	assemblertoken := -1 // assemblerrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		assemblerstate = -1
		assemblerrcvr.char = -1
		assemblertoken = -1
	}()
	assemblerp := -1
	goto assemblerstack

ret0:
	return 0

ret1:
	return 1

assemblerstack:
	/* put a state and value onto the stack */
	if assemblerDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", assemblerTokname(assemblertoken), assemblerStatname(assemblerstate))
	}

	assemblerp++
	if assemblerp >= len(assemblerS) {
		nyys := make([]assemblerSymType, len(assemblerS)*2)
		copy(nyys, assemblerS)
		assemblerS = nyys
	}
	assemblerS[assemblerp] = assemblerVAL
	assemblerS[assemblerp].yys = assemblerstate

assemblernewstate:
	assemblern = int(assemblerPact[assemblerstate])
	if assemblern <= assemblerFlag {
		goto assemblerdefault /* simple state */
	}
	if assemblerrcvr.char < 0 {
		assemblerrcvr.char, assemblertoken = assemblerlex1(assemblerlex, &assemblerrcvr.lval)
	}
	assemblern += assemblertoken
	if assemblern < 0 || assemblern >= assemblerLast {
		goto assemblerdefault
	}
	assemblern = int(assemblerAct[assemblern])
	if int(assemblerChk[assemblern]) == assemblertoken { /* valid shift */
		assemblerrcvr.char = -1
		assemblertoken = -1
		assemblerVAL = assemblerrcvr.lval
		assemblerstate = assemblern
		if Errflag > 0 {
			Errflag--
		}
		goto assemblerstack
	}

assemblerdefault:
	/* default state action */
	assemblern = int(assemblerDef[assemblerstate])
	if assemblern == -2 {
		if assemblerrcvr.char < 0 {
			assemblerrcvr.char, assemblertoken = assemblerlex1(assemblerlex, &assemblerrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if assemblerExca[xi+0] == -1 && int(assemblerExca[xi+1]) == assemblerstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			assemblern = int(assemblerExca[xi+0])
			if assemblern < 0 || assemblern == assemblertoken {
				break
			}
		}
		assemblern = int(assemblerExca[xi+1])
		if assemblern < 0 {
			goto ret0
		}
	}
	if assemblern == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			assemblerlex.Error(assemblerErrorMessage(assemblerstate, assemblertoken))
			Nerrs++
			if assemblerDebug >= 1 {
				__yyfmt__.Printf("%s", assemblerStatname(assemblerstate))
				__yyfmt__.Printf(" saw %s\n", assemblerTokname(assemblertoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for assemblerp >= 0 {
				assemblern = int(assemblerPact[assemblerS[assemblerp].yys]) + assemblerErrCode
				if assemblern >= 0 && assemblern < assemblerLast {
					assemblerstate = int(assemblerAct[assemblern]) /* simulate a shift of "error" */
					if int(assemblerChk[assemblerstate]) == assemblerErrCode {
						goto assemblerstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if assemblerDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", assemblerS[assemblerp].yys)
				}
				assemblerp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if assemblerDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", assemblerTokname(assemblertoken))
			}
			if assemblertoken == assemblerEofCode {
				goto ret1
			}
			assemblerrcvr.char = -1
			assemblertoken = -1
			goto assemblernewstate /* try again in the same state */
		}
	}

	/* reduction by production assemblern */
	if assemblerDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", assemblern, assemblerStatname(assemblerstate))
	}

	assemblernt := assemblern
	assemblerpt := assemblerp
	_ = assemblerpt // guard against "declared and not used"

	assemblerp -= int(assemblerR2[assemblern])
	// assemblerp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if assemblerp+1 >= len(assemblerS) {
		nyys := make([]assemblerSymType, len(assemblerS)*2)
		copy(nyys, assemblerS)
		assemblerS = nyys
	}
	assemblerVAL = assemblerS[assemblerp+1]

	/* consult goto table to find next state */
	assemblern = int(assemblerR1[assemblern])
	assemblerg := int(assemblerPgo[assemblern])
	assemblerj := assemblerg + assemblerS[assemblerp].yys + 1

	if assemblerj >= assemblerLast {
		assemblerstate = int(assemblerAct[assemblerg])
	} else {
		assemblerstate = int(assemblerAct[assemblerj])
		if int(assemblerChk[assemblerstate]) != -assemblern {
			assemblerstate = int(assemblerAct[assemblerg])
		}
	}
	// dummy call; replaced with literal code
	switch assemblernt {

	case 1:
		assemblerDollar = assemblerS[assemblerpt-0 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:53
		{
			log.Debug("* empty program")
			assemblerVAL.program = &Program{
				statements: make([]*statement, 0),
			}
			assemblerlex.(*lexer).program = assemblerVAL.program
		}
	case 2:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:60
		{
			log.Debugf("* appendind stmt %v, stmt count %d", assemblerDollar[2].stmt, len(assemblerVAL.program.statements))
			assemblerVAL.program = &Program{
				statements: append(assemblerDollar[1].program.statements, assemblerDollar[2].stmt),
			}
			assemblerlex.(*lexer).program = assemblerVAL.program
		}
	case 3:
		assemblerDollar = assemblerS[assemblerpt-0 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:68
		{
			log.Debug("* comment or empty stmt")
			assemblerVAL.stmt = &statement{
				opcode: "comment",
			}
		}
	case 4:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:74
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 5:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:75
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 6:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:76
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 7:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:77
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 8:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:78
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 9:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:79
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 10:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:80
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 11:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:81
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 12:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:82
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 13:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:83
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 14:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:84
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 15:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:85
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 16:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:86
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 17:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:87
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 18:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:88
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 19:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:89
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 20:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:90
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 21:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:91
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 22:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:92
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 23:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:93
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 24:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:94
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 25:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:95
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 26:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:96
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 27:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:97
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 28:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:98
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 29:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:99
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 30:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:100
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 31:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:101
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 32:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:102
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 33:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:103
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 34:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:104
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 35:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:105
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 36:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:106
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 37:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:107
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 38:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:108
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 39:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:109
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 40:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:110
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 41:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:111
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 42:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:112
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 43:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:113
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 44:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:114
		{
			assemblerVAL.stmt = assemblerDollar[1].stmt
		}
	case 45:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:115
		{
			log.Debugf("* stmt expr %v", assemblerVAL.stmt)
			assemblerVAL.stmt = &statement{
				opcode: "expr",
			}
		}
	case 46:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:122
		{
			log.Debugf("* lui_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 47:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:133
		{
			log.Debugf("* auipc_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 48:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:144
		{
			log.Debugf("* jal_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 49:
		assemblerDollar = assemblerS[assemblerpt-2 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:154
		{
			log.Debugf("* jal_stmt (label): %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    1, // if rd is omitted, defaults to x1
				str1:   assemblerDollar[2].tok.lit,
			}
		}
	case 50:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:163
		{
			log.Debugf("* jalr_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 51:
		assemblerDollar = assemblerS[assemblerpt-5 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:174
		{
			log.Debugf("* jalr_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[2].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    1,
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[4].tok.lit],
			}
		}
	case 52:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:186
		{
			log.Debugf("* beq_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "beq",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 53:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:198
		{
			log.Debugf("* bne_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bne",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 54:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:210
		{
			log.Debugf("* blt_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "blt",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 55:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:222
		{
			log.Debugf("* bge_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bge",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 56:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:234
		{
			log.Debugf("* bltu_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bltu",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 57:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:246
		{
			log.Debugf("* bgeu_stmt")
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: "bgeu",
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 58:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:258
		{
			log.Debugf("* lb_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 59:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:270
		{
			log.Debugf("* lh_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 60:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:282
		{
			log.Debugf("* lw_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 61:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:294
		{
			log.Debugf("* lbu_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 62:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:306
		{
			log.Debugf("* lhu_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 63:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:318
		{
			log.Debugf("* sb_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 64:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:330
		{
			log.Debugf("* sh_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 65:
		assemblerDollar = assemblerS[assemblerpt-7 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:342
		{
			log.Debugf("* sw_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 66:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:354
		{
			log.Debugf("* addi_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 67:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:366
		{
			log.Debugf("* slti_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 68:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:378
		{
			log.Debugf("* sltiu_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 69:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:390
		{
			log.Debugf("* xori_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 70:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:402
		{
			log.Debugf("* ori_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 71:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:414
		{
			log.Debugf("* andi_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 72:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:426
		{
			log.Debugf("* slli_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 73:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:438
		{
			log.Debugf("* srli_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 74:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:450
		{
			log.Debugf("* srai_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[6].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    val,
			}
		}
	case 75:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:462
		{
			log.Debugf("* add_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 76:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:472
		{
			log.Debugf("* sub_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 77:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:482
		{
			log.Debugf("* sll_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 78:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:492
		{
			log.Debugf("* slt_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 79:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:502
		{
			log.Debugf("* sltu_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 80:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:512
		{
			log.Debugf("* xor_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 81:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:522
		{
			log.Debugf("* srl_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 82:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:532
		{
			log.Debugf("* sra_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 83:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:542
		{
			log.Debugf("* or_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 84:
		assemblerDollar = assemblerS[assemblerpt-6 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:552
		{
			log.Debugf("* and_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
				op3:    rv32i.Regs[assemblerDollar[6].tok.lit],
			}
		}
	case 85:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:562
		{
			log.Debugf("* li_stmt: %+v", assemblerDollar[1].tok)
			val, err := strconv.Atoi(assemblerDollar[4].tok.lit)
			chkerr(err)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    val,
			}
		}
	case 86:
		assemblerDollar = assemblerS[assemblerpt-4 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:573
		{
			log.Debugf("* seqz_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: assemblerDollar[1].tok.lit,
				op1:    rv32i.Regs[assemblerDollar[2].tok.lit],
				op2:    rv32i.Regs[assemblerDollar[4].tok.lit],
			}
		}
	case 87:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:582
		{
			log.Debugf("* ret_stmt")
			assemblerVAL.stmt = &statement{
				opcode: "jalr",
				op1:    0,
				op2:    0,
				op3:    1,
			}
		}
	case 88:
		assemblerDollar = assemblerS[assemblerpt-2 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:592
		{
			log.Debugf("* label_stmt: %+v", assemblerDollar[1].tok)
			assemblerVAL.stmt = &statement{
				opcode: "label",
				str1:   assemblerDollar[1].tok.lit,
			}
		}
	case 89:
		assemblerDollar = assemblerS[assemblerpt-1 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:600
		{
			assemblerVAL.expr = &numberExpression{Lit: assemblerDollar[1].tok.lit}
		}
	case 90:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:603
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('+'), RHS: assemblerDollar[3].expr}
		}
	case 91:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:606
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('-'), RHS: assemblerDollar[3].expr}
		}
	case 92:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:609
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('*'), RHS: assemblerDollar[3].expr}
		}
	case 93:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:612
		{
			assemblerVAL.expr = &binOpExpression{LHS: assemblerDollar[1].expr, Operator: int('/'), RHS: assemblerDollar[3].expr}
		}
	case 94:
		assemblerDollar = assemblerS[assemblerpt-3 : assemblerpt+1]
//line pkg/rv32iasm/assembler.y:615
		{
			assemblerVAL.expr = &parenExpression{SubExpr: assemblerDollar[2].expr}
		}
	}
	goto assemblerstack /* stack new state and value */
}
